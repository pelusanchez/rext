(()=>{"use strict";var t={554:(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});const r="/**\n * David Iglesias. All rights reserved\n */\nprecision mediump float;\n\n// our texture\nuniform sampler2D u_image;\nuniform vec2 u_textureSize;\nuniform float u_kernel[25];\nuniform float u_kernelWeight;\n\nuniform sampler2D u_lut; \n\nuniform float u_saturation;\nuniform float u_vibrance;\nuniform float u_brightness;\nuniform float u_exposure;\nuniform float u_contrast;\n\nuniform float u_dehaze;\nuniform float u_atmosferic_light;\nuniform float u_masking;\nuniform vec3 u_temptint[3]; // RGB temptint, RGB lightFill, RGB darkFill\nuniform float u_bAndW;\n\nuniform float u_hdr;\n\n// the texCoords passed in from the vertex shader.\nvarying vec2 v_texCoord;\n\n\n// Get light match\nfloat getLightMatch(float val) {\n\tfloat _r = texture2D(u_lut, vec2(val, 0.0)).a;\n\treturn clamp(_r, 0.0, 1.0);\n}\n\n/**\n *\tgetTransmission\n *  Compute transmission map\n */\nfloat getTransmission() {\n\tfloat t = 1.0 / 25.0;\n\tvec4 center = texture2D(u_image, v_texCoord);\n\n\tvec2 onePixel = vec2(1.0, 1.0) / u_textureSize;\n\tfloat dark = 1.0;\n\tconst int radius = 1;\n\tfor (int ii = -radius; ii <= radius; ii++ ) {\n\t\tfor(int jj = -radius; jj <= radius; jj++) {\n\t\t\tvec4 pix = texture2D(u_image, v_texCoord + onePixel * vec2( ii,  jj));\n\t\t\tfloat _min = min(pix.r, min(pix.g, pix.b));\n\t\t\tif (dark > _min) { dark = _min; }\n\t\t}\n\t}\n\n\tfloat darkPix = min(center.r, min(center.g, center.b));\n\tfloat diff = abs(darkPix - dark);\n\tfloat mask = pow(diff, 3.0);\n\tdark = mix(darkPix, dark, mask);\n\n\treturn 1.0 - dark;\n}\n\nfloat getLuma(vec3 rgb_pix) {\n\t/* RGB to luminosity. Each channel has different weights */\n\treturn dot(rgb_pix, vec3(0.2126, 0.7152, 0.0722));\n}\n\n\n\nfloat getV(vec3 pix) {\n\treturn max(pix.r, max(pix.g, pix.b));\n}\n\n// Returns min and max value\nvec2 localContrast() {\n\tvec2 onePixel = vec2(1.0, 1.0) / u_textureSize;\n\tfloat _min = 1.0;\n\tfloat _max = 0.0;\n\tfor (int i = -2; i <= 2; i++) {\n\t\tfor(int j = -2; j <= 2; j++) {\n\t\t\t_max = max(getV(texture2D(u_image, v_texCoord + onePixel * vec2( i,  j)).rgb), _max);\n\t\t\t_min = min(getV(texture2D(u_image, v_texCoord + onePixel * vec2( i,  j)).rgb), _min);\n\t\t}\n\t}\n\treturn vec2(_min, _max);\n}\n\nfloat getHDR(float val) {\n\n\t// Contrast stretch \n\tfloat midVal = 1.0 - pow(1.0 - pow(val, 0.3), 0.42);\n\treturn clamp(midVal, 0.0, 1.0);\n}\n\n\nvec4 image_process(vec4 PIXEL_COLOR) {\n\n\t/*\n\t\tColor (Hue) preservation: \n\t\t\tInstead of converting color to a 'hue independent' color space, use\n\t  \tthe maximun value of the rgb channels and the factor.\n\t\t\tsv_pixel = [(saturation), ('lightness')]\n\t*/\t\n \tfloat _max = max(PIXEL_COLOR.r, max(PIXEL_COLOR.g, PIXEL_COLOR.b));\n \tfloat _min = min(PIXEL_COLOR.r, min(PIXEL_COLOR.g, PIXEL_COLOR.b));\n \tvec2 sv_pixel = vec2(1 - _min / _max, _max);\n\n\tsv_pixel.y = getLightMatch(sv_pixel.y);\n\n\tif (u_vibrance != 1.0) { /* Apply vibrance */\n\t\tsv_pixel.x = pow(sv_pixel.x, u_vibrance);\n\t}\n\n\tif (u_saturation != 0.0) { /* Apply saturation */\n\t\tsv_pixel.x += u_saturation;\n\t}\n\n\t/* Value constraints [0, 1]: Prevents saturation */\n\tsv_pixel.x = clamp(sv_pixel.x, 0.0, 1.0);\n\n\tsv_pixel.y = pow(sv_pixel.y, 1.0 - u_brightness * 0.6);\n\n\t/* High Dynamic Range 'effect' */\n\tif (u_hdr != 0.0) {\n\t\tsv_pixel.y = mix(sv_pixel.y, getHDR(sv_pixel.y), u_hdr);\n\t}\n\n\tfloat contrast = u_contrast + 1.0;\n\tsv_pixel.y = contrast * (sv_pixel.y - 0.5) + 0.5;\n\tsv_pixel.x = clamp(sv_pixel.x, 0.0, 1.0);\n\tsv_pixel.y = clamp(sv_pixel.y, 0.0, 1.0);\n\t\n\t// Transform sv to rgb\n\tvec3 rgb_pix = PIXEL_COLOR;\n\tif (sv_pixel.x > 0) {\n\t\t// Update saturation\n\t\trgb_pix = (_max - rgb_pix) * k + _max;\n\t\t// Update value\n\t\trgb_pix *= sv_pixel.y / _max;\n\t} else {\n\t\trgb_pix.r = rgb_pix.g = rgb_pix.b = sv_pixel.v;\n\t}\n\n\t/* Now we dont need constant hue. Usiing rgb space */\n\n\tif (u_dehaze != 0.0) { /* Dehaze small algorightm */\n\t\tfloat transmision = getTransmission();\n\t\tfloat mm = max(transmision, 0.2);\n\t\trgb_pix = mix(rgb_pix, ((rgb_pix - u_atmosferic_light) / mm + u_atmosferic_light), u_dehaze); \n\t}\n\n\trgb_pix += u_exposure; /* Exposure as simply add a value to the channels */\n\n\trgb_pix = clamp(rgb_pix, 0.0, 1.0);\t\n\n\t// Temptint operations (TINT AND TEMPERATURE)\n\trgb_pix *= u_temptint[0];\n\n\t// Lightfill operations\n\tfloat mono = getLuma(rgb_pix);\n\trgb_pix += mix(u_temptint[2], u_temptint[1], mono);\n\t\n\t// Black and White\n\tif (u_bAndW != 0.0) {\n\t\trgb_pix = mix(rgb_pix, mono, u_bAndW);\n\t}\n\n\treturn vec4(rgb_pix, 1.0);\n}\n\nvoid main() {\n  vec2 onePixel = vec2(1.0, 1.0) / u_textureSize;\n  vec4 center = texture2D(u_image, v_texCoord);\n\n  // \n  // 5x5 kernel \n  vec4 colorSum =\n  \ttexture2D(u_image, v_texCoord + onePixel * vec2(-2, -2)) * u_kernel[0] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( -1, -2)) * u_kernel[1] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 0, -2)) * u_kernel[2] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 1, -2)) * u_kernel[3] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 2, -2)) * u_kernel[4] +\n\n    texture2D(u_image, v_texCoord + onePixel * vec2( -2, -1)) * u_kernel[5] +\n    texture2D(u_image, v_texCoord + onePixel * vec2(-1, -1)) * u_kernel[6] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 0, -1)) * u_kernel[7] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 1, -1)) * u_kernel[8] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 2, -1)) * u_kernel[9] +\n\n    texture2D(u_image, v_texCoord + onePixel * vec2( -2, 0)) * u_kernel[10] +\n    texture2D(u_image, v_texCoord + onePixel * vec2(-1,  0)) * u_kernel[11] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 0,  0)) * u_kernel[12] + // Center\n    texture2D(u_image, v_texCoord + onePixel * vec2( 1,  0)) * u_kernel[13] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 2, 0)) * u_kernel[14] +\n\n    texture2D(u_image, v_texCoord + onePixel * vec2(-2,  1)) * u_kernel[15] +\n    texture2D(u_image, v_texCoord + onePixel * vec2(-1,  1)) * u_kernel[16] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 0,  1)) * u_kernel[17] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 1,  1)) * u_kernel[18] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 2,  1)) * u_kernel[19] +\n\n    texture2D(u_image, v_texCoord + onePixel * vec2(-2,  2)) * u_kernel[20] +\n    texture2D(u_image, v_texCoord + onePixel * vec2(-1,  2)) * u_kernel[21] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 0,  2)) * u_kernel[22] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 1,  2)) * u_kernel[23] +\n    texture2D(u_image, v_texCoord + onePixel * vec2( 2,  2)) * u_kernel[24];\n\n\n\n\n  vec4 masking = mix(center, vec4((colorSum / u_kernelWeight).rgb, 1), u_masking);\n\n  gl_FragColor = image_process(masking);\n}\n"},186:(t,e,n)=>{n.r(e),n.d(e,{default:()=>r});const r="attribute vec2 a_position;\nattribute vec2 a_texCoord;\nuniform vec2 u_resolution;\nvarying vec2 v_texCoord;\nvoid main() {\n   vec2 dist = a_position / u_resolution;\n   gl_Position = vec4( (dist * 2.0 - 1.0) * vec2(1, -1), 0, 1);\n   v_texCoord = a_texCoord;\n}\n"}},e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=function(t,e,n){return t<e?e:t>n?n:t},e=function(t,e,n,r,i,o,a,l){void 0===i&&(i=0),void 0===o&&(o=.33),void 0===a&&(a=.66),void 0===l&&(l=1);var u,s,g,_,m,h,x,c,f,v,p,d,b,E,R,T,A,P=Math.pow(i,2),k=Math.pow(o,2),C=Math.pow(a,2),w=Math.pow(l,2),L=function(t){for(var e=t.length,n=0;n<e;n++)t[n]=Math.round(1e3*t[n])/1e3;return t}((h=(g=[i,o,a,l])[2]-g[3],m=(u=[P*i,k*o,C*a,w*l])[0]*((s=[P,k,C,w])[1]*h-g[1]*(c=s[2]-s[3])+(v=s[2]*g[3]-g[2]*s[3]))-s[0]*(u[1]*h-g[1]*(x=u[2]-u[3])+(p=u[2]*g[3]-g[2]*u[3]))+g[0]*(u[1]*c-s[1]*x+(d=u[2]*s[3]-s[2]*u[3]))-(u[1]*v-s[1]*p+g[1]*d),[((_=[t,e,n,r])[0]*(s[1]*h-g[1]*c+v)-s[0]*(_[1]*h-g[1]*(f=_[2]-_[3])+(b=_[2]*g[3]-g[2]*_[3]))+g[0]*(_[1]*c-s[1]*f+(E=_[2]*s[3]-s[2]*_[3]))-(_[1]*v-s[1]*b+g[1]*E))/m,(u[0]*(_[1]*h-g[1]*f+b)-_[0]*(u[1]*h-g[1]*x+p)+g[0]*(u[1]*f-_[1]*x+(R=u[2]*_[3]-_[2]*u[3]))-(u[1]*b-_[1]*p+g[1]*R))/m,(u[0]*(s[1]*f-_[1]*c+(T=s[2]*_[3]-_[2]*s[3]))-s[0]*(u[1]*f-_[1]*x+R)+_[0]*(u[1]*c-s[1]*x+d)-(u[1]*T-s[1]*R+_[1]*d))/m,(u[0]*(s[1]*(A=g[2]*_[3]-_[2]*g[3])-g[1]*T+_[1]*v)-s[0]*(u[1]*A-g[1]*R+_[1]*p)+g[0]*(u[1]*T-s[1]*R+_[1]*d)-_[0]*(u[1]*v-s[1]*p+g[1]*d))/m]));return function(t){var e=L[3],n=t;return e+=L[2]*n,n*=t,e+=L[1]*n,n*=t,e+L[0]*n}},r={hdr:0,exposure:0,temperature:0,tint:0,brightness:0,saturation:0,contrast:0,sharpen:0,masking:.5,sharpen_radius:1,radiance:0,highlights:0,shadows:0,whites:0,blacks:0,dehaze:0,bAndW:0,atmosferic_light:.7,lightFill:0,lightColor:0,lightSat:1,darkFill:0,darkColor:0,darkSat:1},i=function(e){var n,r,i,o,a,l;return r=(n=e.z*e.y)*(1-Math.abs(e.x/60%2-1)),i=e.z-n,e.x<180?e.x<60?(o=e.z,a=r+i,l=i):e.x<120?(o=r+i,a=e.z,l=i):(o=i,a=e.z,l=r+i):e.x<240?(o=i,a=r+i,l=e.z):e.x<300?(o=r+i,a=i,l=n+i):(o=n+i,a=i,l=r+i),{x:o=t(o,0,1),y:a=t(a,0,1),z:l=t(l,0,1)}},o=function(t){return[t.x,t.y,t.z]},a=(n(554),n(186),1e7),l=25e5;void 0===window||window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var u=function(t){return JSON.parse(JSON.stringify(t))},s=(u(r),null),g=function(){function t(){}return t.prototype.log=function(t){console.log(t)},t.prototype.warn=function(t){console.warn(t)},t.prototype.error=function(t){console.error(t)},t}();function _(t,e,n){var r=t.createShader(e);if(t.shaderSource(r,n),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS))return r;console.log(t.getShaderInfoLog(r)),t.deleteShader(r)}function m(t){var e=t.createTexture();return t.bindTexture(t.TEXTURE_2D,e),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),e}!function(){function t(){this.params=u(r),this.gl=null,this.log=new g,this.uniforms={kernel:[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0],temptint:[1,1,1]},this.LIGHT_MATCH=function(){for(var t=[],e=0;e<256;e++)t[e]=e;return t}()}t.prototype.setLog=function(t){this.log=t},t.prototype.updateKernel=function(){var t=-this.params.sharpen,e=this.params.sharpen_radius,n=this.params.radiance,r=this.params.hdr;0!=n&&(t-=.5*n,e+=.5*n),0!=r&&(t-=.5*r,e+=.5*r);var i=t*Math.exp(-Math.pow(1/e,2)),o=t*Math.exp(-Math.pow(1.41/e,2)),a=t*Math.exp(-Math.pow(2/e,2)),l=t*Math.exp(-Math.pow(2.24/e,2)),u=t*Math.exp(-Math.pow(2.83/e,2)),s=1;t<0&&(s+=4*Math.abs(u)+8*Math.abs(l)+4*Math.abs(a)+4*Math.abs(o)+4*Math.abs(i)),this.uniforms.kernel=[u,l,a,l,u,l,o,i,o,l,a,i,s,i,a,l,o,i,o,l,u,l,a,l,u]},t.prototype.updateTemptint=function(){var t,e,n,r=this.params.temperature,i=this.params.tint;if(r<0){t=1;var o=TEMP_DATA[Math.floor(100*(r+1))];e=o[0],n=o[1]}else t=.0438785/Math.pow(r+.150127,1.23675)+.543991,e=.0305003/Math.pow(r+.163976,1.23965)+.69136,n=1;-1==i&&(i=-.99);var a,l=1/(.2126*(a={x:t,y:e+=i,z:n}).x+.7152*a.y+.0722*a.z);this.uniforms.temptint=[t*l,e*l,n*l]},t.prototype.generateLightningfunction=function(){var t=this.params.blacks,n=this.params.shadows,r=this.params.highlights,i=this.params.whites,o=this.params.radiance,a=e(t,n+.33,r+.66,i+1,0,.33,.66,1);if(0!=o)var l=e(0,.33-.11*o,.66+.11*o,1,0,.33,.66,1);for(var u=0;u<256;u++){var s=u/256;s>1&&(s=1),s<0&&(s=0),s>1&&(s=1),s<0&&(s=0),l&&(s=l(s)),(s=a(s))>1&&(s=1),s<0&&(s=0),this.LIGHT_MATCH[u]=255*s}},t.prototype.kernelNormalization=function(t){return t.reduce((function(t,e){return t+e}))},t.prototype.render=function(t,e){var n,r=this,a=_(this.gl,this.gl.VERTEX_SHADER,__SHADERS__.VERTEX),l=_(this.gl,this.gl.FRAGMENT_SHADER,__SHADERS__.FRAGMENT);try{n=function(t,e,n){var r=t.createProgram();if(t.attachShader(r,e),t.attachShader(r,n),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS))return r;console.log(t.getProgramInfoLog(r)),t.deleteProgram(r)}(this.gl,a,l)}catch(t){return this.log.error(t)}var u=this.gl.getAttribLocation(n,"a_position"),s=this.gl.getAttribLocation(n,"a_texCoord"),g=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,g);var h=t.width,x=t.height;this.gl.canvas.width=h,this.gl.canvas.height=x,console.log("[IMAGE] width = "+h+", height = "+x),this.setRectangle(0,0,h,x);var c=this.gl.createBuffer();this.gl.bindBuffer(this.gl.ARRAY_BUFFER,c),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),this.gl.STATIC_DRAW),this.gl.activeTexture(this.gl.TEXTURE0),m(this.gl);try{this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,t)}catch(t){return this.log.error(t)}var f=this.gl.getUniformLocation(n,"u_image"),v=this.gl.getUniformLocation(n,"u_resolution"),p=this.gl.getUniformLocation(n,"u_textureSize"),d=this.gl.getUniformLocation(n,"u_kernel[0]"),b=this.gl.getUniformLocation(n,"u_kernelWeight"),E=this.gl.getUniformLocation(n,"u_exposure"),R=this.gl.getUniformLocation(n,"u_brightness"),T=this.gl.getUniformLocation(n,"u_contrast"),A=this.gl.getUniformLocation(n,"u_saturation"),P=this.gl.getUniformLocation(n,"u_masking"),k=this.gl.getUniformLocation(n,"u_dehaze"),C=this.gl.getUniformLocation(n,"u_atmosferic_light"),w=this.gl.getUniformLocation(n,"u_temptint[0]"),L=this.gl.getUniformLocation(n,"u_bAndW"),D=this.gl.getUniformLocation(n,"u_hdr"),y=this.gl.getUniformLocation(n,"u_lut");this.gl.activeTexture(this.gl.TEXTURE1),m(this.gl),this.gl.viewport(0,0,h,x),this.gl.clearColor(0,0,0,0),this.gl.clear(this.gl.COLOR_BUFFER_BIT),e||(r.gl.texImage2D(r.gl.TEXTURE_2D,0,r.gl.ALPHA,256,1,0,r.gl.ALPHA,r.gl.UNSIGNED_BYTE,new Uint8Array(r.LIGHT_MATCH)),r.gl.useProgram(n),r.gl.enableVertexAttribArray(u),r.gl.bindBuffer(r.gl.ARRAY_BUFFER,g),r.gl.vertexAttribPointer(u,2,r.gl.FLOAT,!1,0,0),r.gl.enableVertexAttribArray(s),r.gl.bindBuffer(r.gl.ARRAY_BUFFER,c),r.gl.vertexAttribPointer(s,2,r.gl.FLOAT,!1,0,0),r.gl.uniform2f(v,h,x),r.gl.uniform2f(p,h,x),r.gl.uniform1f(R,r.params.brightness),r.gl.uniform1f(E,r.params.exposure),r.gl.uniform1f(T,r.params.contrast),r.gl.uniform1f(A,r.params.saturation),r.gl.uniform1f(P,r.params.masking),r.gl.uniform1f(k,r.params.dehaze),r.gl.uniform1f(C,r.params.atmosferic_light),r.gl.uniform3fv(w,r.uniforms.temptint.concat(o(i({x:360*r.params.lightColor,y:r.params.lightSat,z:r.params.lightFill}))).concat(o(i({x:360*r.params.darkColor,y:r.params.darkSat,z:r.params.darkFill})))),r.gl.uniform1f(L,r.params.bAndW),r.gl.uniform1f(D,r.params.hdr),r.gl.uniform1i(f,0),r.gl.uniform1i(y,1),r.gl.uniform1fv(d,r.uniforms.kernel),r.gl.uniform1f(b,r.kernelNormalization(r.uniforms.kernel)),r.gl.drawArrays(r.gl.TRIANGLES,0,6))},t.prototype.setRectangle=function(t,e,n,r){var i=t,o=t+n,a=e,l=e+r;this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array([i,a,o,a,i,l,i,l,o,a,o,l]),this.gl.STATIC_DRAW)},t.prototype.loadImageFromUrl=function(t){var e=this;(s=new Image).src=t,s.onload=function(){if(s.width*s.height>a){var t=s.height/s.width;s.height=Math.floor(Math.sqrt(t*a)),s.width=Math.floor(s.height/t)}};var n=new Image;n.onerror=function(){e.log.error("Error al cargar la imagen.")},n.onload=function(){try{var t=document.createElement("canvas");if(n.height*n.width>l){var r=Math.sqrt(l*n.height/n.width),i=n.width/n.height*r;t.width=i,t.height=r}else t.width=n.width,t.height=n.height;var o=t.getContext("2d");o.imageSmoothingEnabled=!0,o.drawImage(n,0,0,t.width,t.height);var a=new Image;a.src=t.toDataURL("image/png"),a.onload=function(){e.render(a)}}catch(t){e.log.error(t)}},n.src=t},t.prototype.initGL=function(t){var e=this;this.gl=t.getContext("webgl")||t.getContext("experimental-webgl"),this.gl||alert("Error: No webgl detected"),t.addEventListener("change",(function(t){new FileReader;var n=t.target;n.files[0]&&e.loadImageFromUrl(URL.createObjectURL(n.files[0]))}))}}()})()})();